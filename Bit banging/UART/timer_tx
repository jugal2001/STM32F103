#include "stm32f1xx.h"
#include "mydelay.h"
#define set_tx GPIOA->BSRR = 1 << (9)
#define clear_tx GPIOA->BSRR = 1 << (9 + 16)
volatile uint8_t value = 0xC4;
volatile int flag = 0;
void TIM1_UP_TIM10_IRQHandler(void)
{
	TIM1->SR &= ~TIM_SR_UIF;
	if (value & 0x01)
		set_tx;
	else
		clear_tx;
	value >>= 1;
	flag++;
}

int main()
{
	RCC->APB2ENR |= 1 << 4;
	GPIOC->CRH |= (1 << 21);
	GPIOC->CRH &= ~((1 << 22) | (1 << 23));

	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_TIM1EN;
	GPIOA->CRH &= ~GPIO_CRH_CNF9_0;
	GPIOA->CRH |= GPIO_CRH_MODE9_1;
	GPIOA->BSRR = 1 << (9);

	NVIC_EnableIRQ(TIM1_UP_IRQn);
	TIM1->ARR = 90;
	TIM1->PSC = 8;
	//TIM1->CR1 |= TIM_CR1_ARPE;
	TIM1->CR1 |= TIM_CR1_URS;
	TIM1->DIER |= TIM_DIER_UIE;
	TIM1->CR1 |= TIM_CR1_CEN;
	while (1)
	{
		clear_tx;	//start bit
		TIM1->EGR = 1;
		TIM1->DIER |= TIM_DIER_UIE;
		while (flag < 8)
			;
		TIM1->DIER &= ~TIM_DIER_UIE;
		set_tx;		//stop bit

		delay_ms(1000);
		flag = 0;
		value = 0xFC;
	}
}
