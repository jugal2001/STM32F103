/***RX CODE***/
//resolution of 4 LSBs is lost (just to test)

#include "main.h"

CAN_HandleTypeDef hcan;								//struct containing CAN init settings
CAN_FilterTypeDef sFilterConfig;			//struct containing filter settings
CAN_RxHeaderTypeDef RxMessage;				//struct for recieved data frame
uint8_t rxData[8] = {0,0,0,0,0,0,0,0};//array for recieved data (8 bytes)

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_CAN_Init(void);
void pwm_init(void);

int main(void)
{
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_CAN_Init();
  RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;		//ENABLE AFIO CLOCK
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;	//filter bank consists of 2 32bit values (mask and ID)
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;		//filter set to mask and ID mode
	sFilterConfig.FilterBank = 0;												//filter bank number 0 selected
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;	//assign filter bank to FIFO 0
	sFilterConfig.FilterIdHigh = 0;											//MSB for ID
  sFilterConfig.FilterIdLow = 7;											//LSB							
  sFilterConfig.FilterMaskIdHigh = 0;									//MSB for mask
  sFilterConfig.FilterMaskIdLow = 0;									//LSB
  sFilterConfig.FilterActivation = ENABLE;						//activate filter
	
	
	HAL_CAN_ConfigFilter(&hcan,&sFilterConfig);					//commits filter settings
	pwm_init();
  	HAL_CAN_Start(&hcan);																//start the CAN periph
  
  while (1)
  {
		
		if(HAL_CAN_GetRxFifoFillLevel (&hcan, CAN_RX_FIFO0))						//checks if the number of messages in FIFO 0 is non zero
		{
			HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxMessage, rxData);//stores the data frame in RxMessage struct, stores data in rsData array
			TIM4->CCR4 = rxData[0]<<4;     //8bit adc value recieved
			rxData[0]=0;
		}
		
   
  }
  
}


void SystemClock_Config(void)									//sets system clock to 32mhz HSE
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

static void MX_CAN_Init(void)					//configured for 250Kbits/s , sample point 87.5%
{
	__HAL_RCC_CAN1_CLK_ENABLE();
  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 8;
  hcan.Init.Mode = CAN_MODE_NORMAL;
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
  hcan.Init.TimeTriggeredMode = DISABLE;
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = DISABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
  {
    Error_Handler();
  }
 

}

static void MX_GPIO_Init(void)
{
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

	GPIOB ->CRH &= ~(GPIO_CRH_CNF9_0);
	GPIOB ->CRH |= GPIO_CRH_MODE9_0 | GPIO_CRH_CNF9_1;

}

void pwm_init()
{
	RCC ->APB1ENR |= RCC_APB1ENR_TIM4EN;	
	TIM4 ->CCER |= TIM_CCER_CC4E; //enable channel 4
	TIM4 ->CR1 |= TIM_CR1_ARPE;
  TIM4 ->CCMR2 |= TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4PE; //mode
	TIM4 ->PSC = 1;
	TIM4 ->ARR = 4095;
	TIM4 ->CCR4 = 0;
	TIM4 ->EGR = TIM_EGR_UG; //update registers
	TIM4 ->CR1 = TIM_CR1_CEN; // start timer
}


void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

