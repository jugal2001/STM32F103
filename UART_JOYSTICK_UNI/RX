#include "stm32f10x.h"


volatile int ticks=0;


void SysTick_Handler(void)
{
	ticks++;
}
void delay_ms(int ms)
{
	ticks=0;
	while(ticks<ms);
}
void clock(void)
{
 //turn on external crystal
 RCC->CR |= RCC_CR_HSEON;

 //wait for HSE crystal be stable
 
 while(!(RCC->CR & RCC_CR_HSERDY));
 
 FLASH->ACR |= FLASH_ACR_PRFTBE;

 // Flash 2 wait state 
 FLASH->ACR &= ~(FLASH_ACR_LATENCY);  
 FLASH->ACR |= (uint32_t)0x1;    

 
 //configure RCC and PLL settings while PLL is off
 RCC->CFGR &= ~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |  RCC_CFGR_PLLMULL);  //reset
 
 RCC->CFGR &= ~(RCC_CFGR_PLLXTPRE);   //PLLXTPRE bit set to 0
 RCC->CFGR |= RCC_CFGR_PLLSRC;   //pll source
 RCC->CFGR |= RCC_CFGR_PLLMULL7;  //pll miultiplier 
 RCC->CFGR |= RCC_CFGR_HPRE_DIV2;  //AHB prescaler
 RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;  //APB1 presacaler 
 RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;  //APB2 prescaler
 
  
 //turn on PLL
 RCC->CR |= RCC_CR_PLLON; 
 while (!(RCC->CR & RCC_CR_PLLRDY)) ;
 
 //set pll as clock source
 RCC->CFGR &= ~(RCC_CFGR_SW);  
 RCC->CFGR |= RCC_CFGR_SW_PLL;
 while (!(RCC->CFGR & RCC_CFGR_SWS_PLL)) ;

 SystemCoreClockUpdate();
 
}
void uart_init(void)
{
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;   // enable clock for USART1
	USART1->BRR |= 0x0B64; 			//USARTDIV value for 9600 baud rate
	USART1->CR1 |= USART_CR1_RE | USART_CR1_UE;
}

void pwm_init(void)
{
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;	
	TIM4->CCER |= TIM_CCER_CC4E; 						//enable channel 4
	TIM4->CR1 |= TIM_CR1_ARPE;
  TIM4->CCMR2 |= TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4PE;   //mode
	TIM4->PSC = 1;
	TIM4->ARR = 255;
	TIM4->CCR4 = 0;
	TIM4->EGR = TIM_EGR_UG;  						// update registers
	TIM4->CR1 = TIM_CR1_CEN; 						// start timer
}


int main()
{
	clock();
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN | RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN;
	
	//set up gpio B9 alternate function output 10mhz max
	GPIOB->CRH &= ~(GPIO_CRH_CNF9_0);
	GPIOB->CRH |= GPIO_CRH_MODE9_0 | GPIO_CRH_CNF9_1;
	
	//set up gpio A10 as input (RX)
	GPIOA ->CRH &= ~(GPIO_CRH_MODE10 | GPIO_CRH_CNF10_1);
	GPIOA ->CRH |= GPIO_CRH_CNF10_0;
	
	//set up systick (1ms per interrupt)
	SystemCoreClockUpdate();
	SysTick_Config(SystemCoreClock/1000);
	
	uart_init();
	pwm_init();
	
while(1)
{
	if(USART1 ->SR & USART_SR_RXNE)
	{
	 TIM4->CCR4 = USART1->DR;
	}
}

}


