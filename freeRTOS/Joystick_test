//dummy FreeRTOS program to print the X and Y values from a joystick on a serial terminal at 256,000 baud/s, another task will print a dummy message every second
//A5 , A6 -> Joystick
//A9 -> UART1 TX

#include "stm32f1xx.h"
#include "FreeRTOS.h"
#include "task.h"
#include "semphr.h"
#include <stdarg.h>
#include <string.h>
#include <stdio.h>
#include "mydelay.h"

TaskHandle_t myTask1Handle = NULL;
TaskHandle_t myTask2Handle = NULL;
SemaphoreHandle_t printMutex;

static void myTask1(void *arg);
static void myTask2(void *arg);
static void print(char *msg, ...);

void gpio_init(void);
void adc_init(void);
void uart_init(void);

volatile uint16_t adcdata[2] =
{ 0, 0 };

int main()
{
	SystemCoreClockUpdate();

	gpio_init();
	adc_init();
	uart_init();

	printMutex = xSemaphoreCreateMutex();	//create a mutex for uart print resource
	xTaskCreate(myTask1, "dummy print", 200, (void*) 0, 0, &myTask1Handle);
	xTaskCreate(myTask2, "joystick print", 200, (void*) 0, 0, &myTask2Handle);
	vTaskStartScheduler();

	while (1)
	{
		//useless
	}
}

static void myTask1(void *arg)
{
	int count = 0;
	while (1)
	{
		xSemaphoreTake(printMutex, portMAX_DELAY);		//wait and acquire "UART" mutex
		print("Task 1 Message: %d\n", count++);
		xSemaphoreGive(printMutex);						//release mutex
		vTaskDelay(pdMS_TO_TICKS(1000));
	}
}

static void myTask2(void *arg)
{
	while (1)
	{
		xSemaphoreTake(printMutex, portMAX_DELAY);							//wait and acquire the "UART" mutex
		print("X value = %d , Y value = %d \n", adcdata[0], adcdata[1]);	//print values of X and Y from Joystick on terminal
		xSemaphoreGive(printMutex);											//release mutex
		vTaskDelay(pdMS_TO_TICKS(100));
	}
}

void uart_init(void)
{
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN | RCC_APB2ENR_USART1EN;	// enable clock for AFIO and USART1

	//baud rate = Fclk/(16*USARTDIV)
	USART1->BRR |= 2 << 4; // ~256,000 baud rate
	USART1->CR1 |= USART_CR1_TE | USART_CR1_UE;
}
void adc_init(void)
{
	RCC->CFGR |= RCC_CFGR_ADCPRE_DIV6;   			//adc prescaler /6 (<14mhz)
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN; 				//clock enable for adc
	//enable clock for DMA1
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
	// L[3:0] in ADC1_SQR1 TO SET THE NUMBER OF CONVERSIONS (here default 0000 - 1 conv)

	ADC1->SQR1 |= ADC_SQR1_L_0;							//2 conversions
	ADC1->SQR3 |= ADC_SQR3_SQ1_0 | ADC_SQR3_SQ1_2; 	//channel 5 in sequence 1
	ADC1->SMPR2 |= ADC_SMPR2_SMP5_2; 		 		//set sampling rate (ch5)
	ADC1->SQR3 |= ADC_SQR3_SQ2_1 | ADC_SQR3_SQ2_2; 	//channel 6 in sequence 2
	ADC1->SMPR2 |= ADC_SMPR2_SMP6_2; 		 		//set sampling rate (ch6)

	/*****DMA SETTINGS*****/
	ADC1->CR2 |= ADC_CR2_DMA;							//enable DMA for ADC1
	DMA1_Channel1->CNDTR = 2;
	DMA1_Channel1->CMAR = (uint32_t) adcdata;
	DMA1_Channel1->CPAR = (uint32_t) &(ADC1->DR);
	DMA1_Channel1->CCR |= (DMA_CCR_CIRC | DMA_CCR_MINC | DMA_CCR_MSIZE_0
			| DMA_CCR_PSIZE_0);
	DMA1_Channel1->CCR |= DMA_CCR_EN;
	/**********************/
	ADC1->CR1 |= ADC_CR1_SCAN;
	ADC1->CR2 |= ADC_CR2_ADON | ADC_CR2_CONT; //turn on adc and set it to continous conversion mode
	delay_ms(1);
	ADC1->CR2 |= ADC_CR2_ADON;
	delay_ms(1);
	ADC1->CR2 |= ADC_CR2_CAL;  		      		    //run calibration
	delay_ms(5);
}

void gpio_init(void)
{
	//enable clock for port A and AFIO
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN | RCC_APB2ENR_IOPAEN;

	//set up gpio A5 as analog input (pin A5-->adc channel 5)
	GPIOA->CRL |= GPIO_CRL_CNF5_1;
	GPIOA->CRL &= ~GPIO_CRL_CNF5_0;
	GPIOA->CRL &= ~(GPIO_CRL_MODE5_0 | GPIO_CRL_MODE5_1);

	//set up gpio A6 as analog input (pin A6-->adc channel 6)
	GPIOA->CRL |= GPIO_CRL_CNF6_1;
	GPIOA->CRL &= ~GPIO_CRL_CNF6_0;
	GPIOA->CRL &= ~(GPIO_CRL_MODE6_0 | GPIO_CRL_MODE6_1);

	//set up gpio A9 as output pushpull (USART1_TX)
	GPIOA->CRH |= GPIO_CRH_MODE9 | GPIO_CRH_CNF9_1;
	GPIOA->CRH &= ~GPIO_CRH_CNF9_0;
}
static void print(char *msg, ...)
{
	char buff[50];
	va_list args;
	va_start(args, msg);
	vsprintf(buff, msg, args);

	for (int i = 0; i < strlen(buff); i++)
	{
		USART1->DR = buff[i];
		while (!(USART1->SR & USART_SR_TXE))
			;
	}
}
