#include "stm32f1xx.h"
#include "mydelay.h"      //in MyDrivers

volatile uint16_t adcdata[2] = {0,0};

void adc_init(void)
{
	RCC->CFGR |= RCC_CFGR_ADCPRE_DIV6;   				//adc prescaler /6 (<14mhz)
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN; 				//clock enable for adc
	// L[3:0] in ADC1_SQR1 TO SET THE NUMBER OF CONVERSIONS (here default 0000 - 1 conv)

	ADC1->SQR1 |= ADC_SQR1_L_0;							//2 conversions
	ADC1->SQR3 |= ADC_SQR3_SQ1_0 | ADC_SQR3_SQ1_2; 		//channel 5 in sequence 1
	ADC1->SMPR2 |= ADC_SMPR2_SMP5_2; 		 			//set sampling rate (ch5)
	ADC1->SQR3 |= ADC_SQR3_SQ2_1 | ADC_SQR3_SQ2_2; 		//channel 6 in sequence 2
	ADC1->SMPR2 |= ADC_SMPR2_SMP6_2; 		 			//set sampling rate (ch6)

	/*****DMA SETTINGS*****/
	ADC1->CR2 |= ADC_CR2_DMA;							//enable DMA for ADC1
	DMA1_Channel1->CNDTR = 2;
	DMA1_Channel1->CMAR = (uint32_t) adcdata;
	DMA1_Channel1->CPAR = (uint32_t) &(ADC1->DR);
	DMA1_Channel1->CCR |= (DMA_CCR_CIRC | DMA_CCR_MINC | DMA_CCR_MSIZE_0 | DMA_CCR_PSIZE_0);
	DMA1_Channel1->CCR |= DMA_CCR_EN;
	/**********************/
	ADC1->CR1 |= ADC_CR1_SCAN;
	ADC1->CR2  |= ADC_CR2_ADON | ADC_CR2_CONT;     		//turn on adc and set it to continous conversion mode
	delay_ms(1);
	ADC1->CR2  |= ADC_CR2_ADON;
	delay_ms(1);
	ADC1->CR2  |= ADC_CR2_CAL;  		      		    //run calibration
	delay_ms(5);
}
void pwm_init(void)
{
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
	TIM4->CCER |= TIM_CCER_CC4E; 						//enable channel 4
	TIM4->CCER |= TIM_CCER_CC3E;						//enable channel 3
	TIM4->CR1 |= TIM_CR1_ARPE;

	TIM4->CCMR2 |= TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4PE;  //mode
	TIM4->CCMR2 |= TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3PE;  //mode
	TIM4->CCR4 = 0;
	TIM4->CCR3 = 0;

	TIM4->PSC = 1;
	TIM4->ARR = 4095;
	TIM4->EGR = TIM_EGR_UG;  						// update registers
	TIM4->CR1 = TIM_CR1_CEN; 						// start timer
}

int main()
 {
	//enable clock for port A and B , and AFIO
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN | RCC_APB2ENR_AFIOEN | RCC_APB2ENR_IOPAEN;

	//enable clock for DMA1
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;

	//set up gpio B9 alternate function output 10mhz max (CH4)
	GPIOB->CRH &= ~(GPIO_CRH_CNF9_0);
	GPIOB->CRH |= GPIO_CRH_MODE9_0 | GPIO_CRH_CNF9_1;

	//set up gpio B8 alternate function output 10mhz max (CH3)
	GPIOB->CRH &= ~(GPIO_CRH_CNF8_0);
	GPIOB->CRH |= GPIO_CRH_MODE8_0 | GPIO_CRH_CNF8_1;

	//set up gpio A5 as analog input (pin A5-->adc channel 5)
	GPIOA->CRL |= GPIO_CRL_CNF5_1;
	GPIOA->CRL &= ~GPIO_CRL_CNF5_0;
	GPIOA->CRL &= ~(GPIO_CRL_MODE5_0 | GPIO_CRL_MODE5_1);

	//set up gpio A6 as analog input (pin A6-->adc channel 6)
	GPIOA->CRL |= GPIO_CRL_CNF6_1;
	GPIOA->CRL &= ~GPIO_CRL_CNF6_0;
	GPIOA->CRL &= ~(GPIO_CRL_MODE6_0 | GPIO_CRL_MODE6_1);

	pwm_init();
	adc_init();
while(1)
{
	TIM4->CCR4 = adcdata[0];
	TIM4->CCR3 = adcdata[1];
}

 }
